#!/usr/bin/env node

import { handleGitHubPRTool } from './dist/tools/github-pr.js';
import { ClaudeClient } from './dist/client.js';

async function testGitHubPRTool() {
    console.log('üß™ Testing GitHub PR Tool...\n');

    // Mock Claude client (not used in this tool but required for interface)
    const mockClaudeClient = new ClaudeClient(process.env.CLAUDE_API_KEY || 'test-key');

    try {
        const result = await handleGitHubPRTool(mockClaudeClient, {
            repository_url: 'https://github.com/jade-tseng/scale-advisor',
            github_token: process.env.GITHUB_TOKEN,
            infra_directory: './infra-gen',
            branch_name: 'feature/terraform-infrastructure',
            pr_title: 'Add Terraform Infrastructure Configuration',
            pr_description: 'This PR adds Terraform infrastructure configuration generated by the Scale Advisor multi-agent tool. The infrastructure includes VPC, security groups, EC2 instances, and RDS database setup optimized for scaling.'
        });

        console.log('‚úÖ GitHub PR Tool Test Result:');
        console.log(JSON.stringify(result, null, 2));

    } catch (error) {
        console.error('‚ùå Test failed:', error.message);
        
        // Check for common issues
        if (error.message.includes('GitHub token')) {
            console.log('\nüí° Tip: Set GITHUB_TOKEN environment variable with a valid GitHub personal access token');
        }
        if (error.message.includes('Infrastructure directory not found')) {
            console.log('\nüí° Tip: Run the infra-gen tool first to generate Terraform files');
        }
        if (error.message.includes('Invalid GitHub repository URL')) {
            console.log('\nüí° Tip: Update the repository_url to point to your actual GitHub repository');
        }
    }
}

// Run the test if this file is executed directly
if (import.meta.url === `file://${process.argv[1]}`) {
    testGitHubPRTool();
}

export { testGitHubPRTool };
